---
description: Workflow guidelines for creating and managing short lived branches, submitting changes to github, updating from main, and preparing for pull requests.
alwaysApply: false
---
# Git Branch Workflow (main + short-lived branches)

Use this rule when asked to: create a branch, save work to a branch on GitHub, update a branch
from `main`, prepare a branch for a merge request (PR), or clean up after merge. Prefer rebase for
integration, generate concise commit messages from the diff, and handle conflicts automatically.

## Branch types and naming
- Prefer short-lived branches off `main`.
- Allowed types: `feature/`, `fix/`, `chore/`, `test/`, `docs/`, `refactor/`, `perf/`, `ci/`,
  `build/`, `hotfix/`.
- Naming: `type/short-kebab-summary[-issue]`.
  - Examples: `feature/portfolio-scorer`, `fix/api-timeout-#123`, `docs/readme-setup`.

## Commit messages (auto-generated by agent)
- Imperative, concise, meaning derived from the diff; avoid noise.
- Structure: `type(scope): summary` and optional wrapped body if needed.
  - Examples: `feature(core): add portfolio scoring rules`, `fix(http): retry on 429`.
- Group staged changes into logical commits instead of one huge commit when practical.
- Use `fixup! <commit subject>` for quick follow-ups; squash during prepare-for-PR.

## Safety defaults
- Pull `main` with `--ff-only`.
- Use `--force-with-lease` (never plain `--force`).
- Abort if working tree is dirty unless explicitly stashing.
- Never commit secrets. Respect `.gitignore`.

## Create a new branch
1) Ensure `main` is current.
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git fetch origin --prune && \
  git checkout main && \
  git pull --ff-only origin main
```
2) Create and publish the branch.
```bash
# Replace <name> with type/short-kebab[-issue]
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git checkout -b <name> && \
  git push -u origin <name>
```

## Save work on a branch to GitHub
1) Stage intentional changes only; exclude generated files.
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git add -A
```
2) Generate a meaningful, concise commit message from the diff and commit.
```bash
# The agent must write the message based on changes
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git commit -m "<auto-generated message>"
```
3) Push to the remote tracking branch.
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git push
```

## Update a branch from main (rebase-first)
1) Ensure a clean working tree (or stash and restore).
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git status --porcelain
```
2) Rebase on top of `origin/main`.
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git fetch origin --prune && \
  git rebase origin/main
```
3) If conflicts occur, the agent resolves them, runs tests, then continues.
```bash
# After fixing conflicted files
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git add -A && \
  git rebase --continue
```
4) Update the remote branch (rebased history).
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git push --force-with-lease
```

## Prepare a branch for PR (rebase + squash fixups)
1) Rebase onto latest main and autosquash fixups (non-interactive editor).
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git fetch origin --prune && \
  GIT_SEQUENCE_EDITOR=true git rebase -i --rebase-merges --autosquash origin/main
```
2) Ensure linters/format/tests pass; make final tidy commits as needed.
3) Push with `--force-with-lease`.
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git push --force-with-lease
```
4) Open PR.
```bash
# If GitHub CLI is available
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  gh pr create --fill --base main --head $(git branch --show-current)
```
- If CLI is unavailable, open a PR in the GitHub UI with the same base/head.

## Clean up after merge
```bash
cd /Users/jhaapasa/repos/PortfolioAdvisor && \
  git fetch origin --prune && \
  git checkout main && \
  git pull --ff-only origin main && \
  git branch -d <name> && \
  git push origin --delete <name>
```

## Conflict resolution policy (agent)
- Prefer keeping both logical changes; reconcile behavior deliberately, not mechanically.
- Preserve `main`’s configuration/formatting defaults; adapt the branch to them when safe.
- After each conflict resolution chunk, run linters/tests before continuing the rebase.
- If a rebase becomes pathological, consider `rebase --abort` and report; only merge
  as a last resort and with explicit user direction.

## Notes for the agent
- Run commands non-interactively; append `| cat` when a pager could appear.
- Use absolute paths; stay in a single shell where possible so environment persists.
- When generating commit messages, prefer: scope, changed modules, and high-level intent over
  implementation details. Keep subjects ≤ 72 chars; wrap bodies at ~100 chars.