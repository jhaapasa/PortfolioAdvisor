---
alwaysApply: true
---

# Project Coding Rules

These repository-wide rules are always included. If a rule conflicts with file-specific guidance, prefer the file-specific guidance.

## Design Principles (In Priority Order From Highest to Lowest)
1. Use the DRY principle - Don't Repeat Yourself in code.
2. Produce professional, structured and maintainable code.
3. Maintain test coverage above 80%
4. Be opinionated when it leads to simpler designs. Avoid introducing parameters and alternate code paths if possible.
5. Refactoring efforts should focus on maintainability and minimizing redundancy on the feature being worked on. Treat changes touching multiple modules or public APIs as "large refactors" — pause and confirm before proceeding.
6. We are in early development so it's ok to break backwards compatibility to keep code simpler.

## Communication
- Be concise and skimmable; use short sections and bullet points.
- Use backticks for file, directory, function, and class names.
- Only fence code when necessary to show examples.
- For large changes, briefly outline a plan. Proceed incrementally and state assumptions; pause only if the user requests approval gates or you are blocked.

## Code Style
- Naming: Descriptive, full words; avoid abbreviations.
- Types: Prefer type hints for public APIs; avoid `Any` when possible.
- Control flow: Use early returns; avoid deep nesting.
- Errors: Handle and propagate meaningfully; avoid silent catches.
- Comments: Explain "why" for complex logic; avoid obvious comments.
- Formatting: Match existing style; do not reformat unrelated code.
- Indentation: Preserve existing tabs/spaces style and width; do not mix or convert.
- Line length: Default to 100 characters unless the project specifies otherwise.

## Dependencies
- Avoid adding new dependencies without explicit request/approval.
- Prefer standard library and existing utilities first.
- Use `pyproject.toml` for package and dependency management.
- Do not add or use `requirements.txt`.

## Testing and Quality
- Add/update tests when changing behavior.
- Keep tests deterministic and fast.
- Avoid test dependency on environmental variables.
- Avoid test dependency on online services - mock all required services instead.

## Before Commit Checklist
Run these in order (in the repo root) before every commit or force-push:
- `./scripts/format`
- `./scripts/lint`
- `source .venv/bin/activate && pytest -q --cov=src/portfolio_advisor --cov-report=term-missing`
- If any command fails, capture the exact output and resolve before continuing.

## Security
- Never commit secrets, tokens, or credentials.
- Sanitize logs; avoid leaking sensitive data.

## Git and PRs
- Make focused commits with meaningful messages.
- Include a brief summary of impact and risks.
- Provide minimal reproduction or test notes when relevant.

## Performance
- Optimize only when necessary and measurable.
- Prefer readable algorithms; annotate hotspots if optimized.

## Architecture (Customize)
- Respect module boundaries and layering.
- Keep public interfaces small.
- Document new interfaces or protocols briefly.

## Documentation
- Update README or inline docs when CLI parameters / ENV Variables change, or when public interfaces change.
- Update function/class docstrings when behaviour or return values change.
- Include usage examples for new tools or scripts.

## Agent Execution (Cursor)
- Always activate the .venv virtual environment when testing code
- Reinstall the package in the virtual environment to resolve new dependencies if needed
- Prefer absolute paths in tool calls.
- Pass non-interactive flags for commands (e.g., `--yes`); avoid prompts.
- If a command uses a pager, append `| cat`.
- Long-running commands should run in the background.
- Parallelize read-only discovery (searches/reads) when independent; limit to 3–5 concurrent calls.
- Prefer semantic code search for discovery; use exact search for symbols.
- After substantive edits, run format/lint and tests; fix failures before reporting completion.
- Avoid posting long code in chat unless requested; make edits in files instead.
- Call out any breaking changes explicitly.
- Surface TODOs via the `todo_write` tool during work, and mirror long-lived items in docs/TODO.md as a bulleted list.

## Repository Layout
- `src/` for application code.
- `tests/` mirrors `src/` structure; name tests `test_*.py`.
- Keep scripts and tooling in `scripts/`.

## Project Software Stack and Tooling
- Target Python 3.13.7.
- Use `LangGraph` for the main agentic framework.
- Use `pytest` for unit tests and `coverage.py` via `pytest-cov` for integrated coverage measurement.
- Use `Black` for formatting and `Ruff` for linting.

## Formatter/Linter Defaults
- Black: line length 100; target version `py313`.
- Ruff: line length 100; target version `py313`; enable import sorting.